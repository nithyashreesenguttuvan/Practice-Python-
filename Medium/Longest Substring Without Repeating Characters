Given a string s, find the length of the longest substring without duplicate characters.

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 
Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

CODE:

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        sett=set()
        mlen=0
        j=0
        
        for i in range(len(s)):
            while s[i] in sett:
                sett.remove(s[j])
                j+=1
            sett.add(s[i])
            mlen=max(mlen,i-j+1)
        return mlen
